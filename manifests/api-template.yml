AWSTemplateFormatVersion: '2010-09-09'
Description: 'AWS CloudFormation template to create a VPC and an EKS cluster with a worker node group'

Mappings:
  VpcIpRanges:
    Option1:
      VPC: 10.0.0.0/16
      Subnet1: 10.0.1.0/24
      Subnet2: 10.0.2.0/24

Parameters:
  ClusterName:
    Type: String
    Default: api-cluster
    Description: Name of the EKS cluster
  KubernetesVersion:
    Type: String
    Default: '1.32'
    Description: Kubernetes version for the EKS cluster
  NodeGroupName:
    Type: String
    Default: api-node-group
    Description: Name of the worker node group
  NodeInstanceType:
    Type: String
    Default: t3.small
    Description: Instance type for the worker nodes
  DesiredCapacity:
    Type: Number
    Default: 2
    Description: Desired number of worker nodes
  MinSize:
    Type: Number
    Default: 1
    Description: Minimum number of worker nodes
  MaxSize:
    Type: Number
    Default: 3
    Description: Maximum number of worker nodes

Resources:
  #============================================================================#
  # VPC
  #============================================================================#
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !FindInMap [VpcIpRanges, Option1, VPC]
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub ${ClusterName}-vpc

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${ClusterName}-igw

  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  Subnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !FindInMap [VpcIpRanges, Option1, Subnet1]
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${ClusterName}-subnet-1
        - Key: kubernetes.io/role/elb
          Value: '1'

  Subnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !FindInMap [VpcIpRanges, Option1, Subnet2]
      AvailabilityZone: !Select [1, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${ClusterName}-subnet-2
        - Key: kubernetes.io/role/elb
          Value: '1'

  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${ClusterName}-public-rt

  RouteToInternet:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  Subnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref Subnet1
      RouteTableId: !Ref RouteTable

  Subnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref Subnet2
      RouteTableId: !Ref RouteTable

  #============================================================================#
  # EKS Cluster and Node Group
  #============================================================================#
  EKSClusterRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: eks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy

  EKSCluster:
    Type: AWS::EKS::Cluster
    Properties:
      Name: !Ref ClusterName
      Version: !Ref KubernetesVersion
      RoleArn: !GetAtt EKSClusterRole.Arn
      ResourcesVpcConfig:
        SubnetIds:
          - !Ref Subnet1
          - !Ref Subnet2
        EndpointPublicAccess: true
        EndpointPrivateAccess: true
        PublicAccessCidrs:
          - 0.0.0.0/0

  EKSNodeGroupRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
        - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy

  EKSNodeGroup:
    Type: AWS::EKS::Nodegroup
    Properties:
      ClusterName: !Ref EKSCluster
      NodegroupName: !Ref NodeGroupName
      NodeRole: !GetAtt EKSNodeGroupRole.Arn
      InstanceTypes:
        - !Ref NodeInstanceType
      ScalingConfig:
        MinSize: !Ref MinSize
        MaxSize: !Ref MaxSize
        DesiredSize: !Ref DesiredCapacity
      Subnets:
        - !Ref Subnet1
        - !Ref Subnet2

Outputs:
  VpcId:
    Description: The ID of the VPC
    Value: !Ref VPC
  Subnet1Id:
    Description: The ID of Subnet1
    Value: !Ref Subnet1
  Subnet2Id:
    Description: The ID of Subnet2
    Value: !Ref Subnet2
  ClusterName:
    Description: The name of the EKS cluster
    Value: !Ref EKSCluster
  ClusterEndpoint:
    Description: The endpoint for the EKS cluster
    Value: !GetAtt EKSCluster.Endpoint
  NodeGroupName:
    Description: The name of the node group
    Value: !Ref EKSNodeGroup